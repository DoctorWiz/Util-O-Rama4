		public int WriteSequenceFile_CRGfoundOrder(string newFileName, bool selectedOnly, bool noEffects)
		{
			//TODO write code to support selectedOnly and noEffects, not implemented (yet)
			int curChannel = 0;
			int currgbChannel = 0;
			int curSavedIndex = 1;
			int curChannelGroupList = 0;
			int curGroupItem = 0;
			int curTimingGrid = 0;
			int curGridItem = 0;
			int curTrack = 0;
			int curTrackItem = 0;
			bool closeChannel = false;
			string ext = Path.GetExtension(newFileName).ToLower();
			bool channelConfig = false;
			if (ext.CompareTo(".lcc") == 0) channelConfig = true;
			if (channelConfig) noEffects = true;
			//TODO: implement channelConfig flag to write just a channel config file


			WriteSequenceStart(newFileName);

			foreach (Channel theChannel in channels)
			{
				if (!selectedOnly || theChannel.selected)
				{
					if (!theChannel.written)
					{
						WriteChannel(theChannel, selectedOnly, noEffects);
					}
				}
			}

			foreach (RGBchannel theRGB in rgbChannels)
			{
				if (!selectedOnly || theRGB.selected)
				{
					if (!theRGB.written)
					{
						WriteRGBchannel(theRGB, selectedOnly, noEffects, TableType.None);
					}
				}
			}

			foreach(ChannelGroup theGroup in channelGroups)
			{
				if (!selectedOnly || theGroup.selected)
				{
					if (!theGroup.written)
					{
						WriteChannelGroup(theGroup, selectedOnly, noEffects, TableType.None);
					}
				}
			}


			while (curChannel < channels.Count)
			{
				Channel chnl = channels[curChannel];
				closeChannel = false;
				lineOut = utils.LEVEL2 + utils.STFLD + TABLEchannel;
				lineOut += utils.SPC + FIELDname + utils.FIELDEQ + chnl.name + utils.ENDQT;
				lineOut += utils.SPC + FIELDcolor + utils.FIELDEQ + chnl.color.ToString() + utils.ENDQT;
				lineOut += utils.SPC + FIELDcentiseconds + utils.FIELDEQ + chnl.centiseconds.ToString() + utils.ENDQT;
				if (chnl.output.deviceType == DeviceType.LOR)
				{
					lineOut += utils.SPC + FIELDdeviceType + utils.FIELDEQ + SeqEnums.DeviceName(chnl.output.deviceType) + utils.ENDQT;
					lineOut += utils.SPC + FIELDunit + utils.FIELDEQ + chnl.output.unit.ToString() + utils.ENDQT;
					lineOut += utils.SPC + FIELDcircuit + utils.FIELDEQ + chnl.output.circuit.ToString() + utils.ENDQT;
				}
				else if (chnl.output.deviceType == DeviceType.DMX)
				{
					lineOut += utils.SPC + FIELDdeviceType + utils.FIELDEQ + SeqEnums.DeviceName(chnl.output.deviceType) + utils.ENDQT;
					lineOut += utils.SPC + FIELDcircuit + utils.FIELDEQ + chnl.output.circuit.ToString() + utils.ENDQT;
					lineOut += utils.SPC + FIELDnetwork + utils.FIELDEQ + chnl.output.network.ToString() + utils.ENDQT;
				}
				lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + chnl.savedIndex.ToString() + utils.ENDQT;
				curSavedIndex = chnl.savedIndex;
				// Are there any effects for this channel?
				if (chnl.effects.Count > 0)
				{
					// complete channel line with regular '>' then do effects
					lineOut += utils.FINFLD;
					writer.WriteLine(lineOut); lineCount++;

					writeEffects(channels[curChannel]);
				} // while (effects[curEffect].channelIndex == curChannel)

				else // NO effects for this channal
				{
					// complete channel line with field end '/>'
					lineOut += utils.ENDFLD;
					writer.WriteLine(lineOut); lineCount++;
				}
				if (closeChannel)
				{
					lineOut = utils.LEVEL2 + utils.FINTBL + TABLEchannel + utils.FINFLD;
					writer.WriteLine(lineOut); lineCount++;
				}
				// Was this an RGB Channel?
				if (currgbChannel < rgbChannels.Count)
				{
					if (rgbChannels[currgbChannel].bluSavedIndex == curSavedIndex)
					{
						lineOut = utils.LEVEL2 + utils.STFLD + TABLErgbChannel;
						lineOut += utils.SPC + FIELDtotalCentiseconds + utils.FIELDEQ + rgbChannels[currgbChannel].totalCentiseconds.ToString() + utils.ENDQT;
						lineOut += utils.SPC + FIELDname + utils.FIELDEQ + rgbChannels[currgbChannel].name + utils.ENDQT;
						lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + rgbChannels[currgbChannel].savedIndex.ToString() + utils.ENDQT;
						lineOut += utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL3 + utils.STFLD + TABLEchannel + utils.PLURAL + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL4 + utils.STFLD + TABLEchannel;
						lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + rgbChannels[currgbChannel].redSavedIndex.ToString() + utils.ENDQT;
						lineOut += utils.ENDFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL4 + utils.STFLD + TABLEchannel;
						lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + rgbChannels[currgbChannel].grnSavedIndex.ToString() + utils.ENDQT;
						lineOut += utils.ENDFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL4 + utils.STFLD + TABLEchannel;
						lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + rgbChannels[currgbChannel].bluSavedIndex.ToString() + utils.ENDQT;
						lineOut += utils.ENDFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL3 + utils.FINTBL + TABLEchannel + utils.PLURAL + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL2 + utils.FINTBL + TABLErgbChannel + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;

						curSavedIndex = rgbChannels[currgbChannel].savedIndex;
						currgbChannel++;
					}
				}

				if (curChannelGroupList < channelGroups.Count)
				{ // is a group coming up next?
					while (channelGroups[curChannelGroupList].savedIndex == curSavedIndex + 1)
					{
						lineOut = utils.LEVEL2 + utils.STFLD + TABLEchannelGroupList;
						lineOut += utils.SPC + FIELDtotalCentiseconds + utils.FIELDEQ + channelGroups[curChannelGroupList].totalCentiseconds.ToString() + utils.ENDQT;
						lineOut += utils.SPC + FIELDname + utils.FIELDEQ + channelGroups[curChannelGroupList].name + utils.ENDQT;
						lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + channelGroups[curChannelGroupList].savedIndex.ToString() + utils.ENDQT;
						lineOut += utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL3 + utils.STFLD + TABLEchannelGroup + utils.PLURAL + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						for (int igi = 0; igi < channelGroups[curChannelGroupList].itemSavedIndexes.Count; igi++)
						{
							lineOut = utils.LEVEL4 + utils.STFLD + TABLEchannelGroup;
							lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + channelGroups[curChannelGroupList].itemSavedIndexes[igi].ToString() + utils.ENDQT;
							lineOut += utils.ENDFLD;
							writer.WriteLine(lineOut); lineCount++;

							curGroupItem++;
						}
						lineOut = utils.LEVEL3 + utils.FINTBL + TABLEchannelGroup + utils.PLURAL + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						lineOut = utils.LEVEL2 + utils.FINTBL + TABLEchannelGroupList + utils.FINFLD;
						writer.WriteLine(lineOut); lineCount++;
						curSavedIndex = channelGroups[curChannelGroupList].savedIndex;
						curChannelGroupList++;
					}
				}

				curChannel++;
			} // curChannel < channelCount

			lineOut = utils.LEVEL1 + utils.FINTBL + TABLEchannel + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;

			// TIMING GRIDS
			writeTimingGrids(false);

			// TRACKS
			lineOut = "  <" + TABLEtrack + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;
			for (int trk = 0; trk < tracks.Count; trk++)
			{
				curTrack = trk;
				lineOut = utils.LEVEL2 + utils.STFLD + TABLEtrack;
				if (tracks[curTrack].name.Length > 1)
				{
					lineOut += utils.SPC + FIELDname + utils.FIELDEQ + tracks[curTrack].name + utils.ENDQT;
				}
				lineOut += utils.SPC + FIELDtotalCentiseconds + utils.FIELDEQ + tracks[curTrack].totalCentiseconds.ToString() + utils.ENDQT;
				lineOut += utils.SPC + TABLEtimingGrid + utils.FIELDEQ + tracks[curTrack].timingGridSaveID.ToString() + utils.ENDQT;
				lineOut += utils.FINFLD;
				writer.WriteLine(lineOut); lineCount++;

				lineOut = utils.LEVEL3 + utils.STFLD + TABLEchannel + utils.PLURAL + utils.FINFLD;
				writer.WriteLine(lineOut); lineCount++;

				for (int iti = 0; iti < tracks[curTrack].itemSavedIndexes.Count; iti++)
				{
					lineOut = utils.LEVEL4 + utils.STFLD + TABLEchannel;
					lineOut += utils.SPC + FIELDsavedIndex + utils.FIELDEQ + tracks[curTrack].itemSavedIndexes[iti].ToString() + utils.ENDQT;
					lineOut += utils.ENDFLD;
					writer.WriteLine(lineOut); lineCount++;

					curTrackItem++;
				}

				lineOut = utils.LEVEL3 + utils.FINTBL + TABLEchannel + utils.PLURAL + utils.FINFLD;
				writer.WriteLine(lineOut); lineCount++;

				if (curTrack < tracks.Count)
				{
					writeLoopLevels(curTrack);
				}

				lineOut = utils.LEVEL2 + utils.FINTBL + TABLEtrack + utils.FINFLD;
				writer.WriteLine(lineOut); lineCount++;
				curTrack++;
			}

			writeSequenceClose();

			errorStatus = renameTempFile(newFileName);

			return errorStatus;
		}

		public int WriteSequenceFile_CRGBDisplayOrder(string newFileName)
		{
			return WriteSequenceFile_CRGDisplayOrder(newFileName, false, false);
		}

		public int WriteSequenceFile_CRGDisplayOrder(string newFileName, bool selectedOnly, bool noEffects)
		{
			//TODO write code to support selectedOnly and noEffects, not implemented (yet)
			altHighestSavedIndex = utils.UNDEFINED;
			altSaveID = utils.UNDEFINED;
			List<int> newChannelSIs = new List<int>();
			List<int> newRGBchannelSIs = new List<int>();
			List<int> newChannelGroupSIs = new List<int>();
			altSavedIndexes = null;
			Array.Resize(ref altSavedIndexes, highestSavedIndex + 3);
			Array.Resize(ref altSaveIDs, timingGrids.Count + 1);
			string ext = Path.GetExtension(newFileName).ToLower();
			bool channelConfig = false;
			if (ext.CompareTo(".lcc") == 0) channelConfig = true;
			if (channelConfig) noEffects = true;
			//TODO: implement channelConfig flag to write just a channel config file

			// Clear any 'written' flags from a previous save
			clearWrittenFlags();

			// Write the first line of the new sequence, containing the XML info
			writeSequenceStart(newFileName);

			// Timing Grids do not get written to the file yet
			// But we must renumber the saveIDs
			// Assign new altSaveIDs in the order they appear in the tracks
			for (int tr = 0; tr < tracks.Count; tr++)
			{
				if ((!selectedOnly) || (tracks[tr].selected))
				{
					// We will assume it is
					int tgoi = tracks[tr].timingGridObjIndex;
					if (timingGrids[tgoi].altSaveID == utils.UNDEFINED)
					{
						altSaveID++;
						timingGrids[tgoi].altSaveID = altSaveID;
						altSaveIDs[tgoi] = altSaveID;
						// If the track is selected, it's timingGrid is supposed to be selected also
						timingGrids[tgoi].selected = true;
					}
				}
			}
			for (int tg = 0; tg < timingGrids.Count; tg++)
			{
				// Any more timing grids that are selected, but aren't used by any tracks
				if ((!selectedOnly) || (timingGrids[tg].selected))
				{
					if (timingGrids[tg].altSaveID == utils.UNDEFINED)
					{
						altSaveID++;
						timingGrids[tg].altSaveID = altSaveID;
						altSaveIDs[tg] = altSaveID;
					}
				}
			}

			// loop thru tracks, write items
			for (int t = 0; t < tracks.Count; t++)
			{
				// write out all items for this track
				newChannelSIs = writeTrackItems(t, selectedOnly, TableType.Channel);
				newRGBchannelSIs = writeTrackItems(t, selectedOnly, TableType.RGBchannel);
				newChannelGroupSIs = writeTrackItems(t, selectedOnly, TableType.ChannelGroup);
			}

			// All channels should now be written, close this section
			lineOut = utils.LEVEL1 + utils.FINTBL + TABLEchannel + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;

			// TIMING GRIDS
			writeTimingGrids(selectedOnly);

			// TRACKS
			lineOut = utils.LEVEL1 + utils.STFLD + TABLEtrack + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;
			// Loop thru tracks
			for (int trk = 0; trk < tracks.Count; trk++)
			{
				if ((!selectedOnly) || (tracks[trk].selected))
				{
					writeTrack(trk, selectedOnly);
				}
			}

			writeSequenceClose();

			errorStatus = renameTempFile(newFileName);
			if (filename.Length < 3) filename = newFileName;

			return errorStatus;
		} // end WriteSequenceFileInCRGDisplayOrder

		public int WriteSequenceFile_CRGAlphaOrder(string newFileName)
		{
			return WriteSequenceFile_CRGAlphaOrder(newFileName, false, false);
		}

		public int WriteSequenceFile_CRGAlphaOrder(string newFileName, bool selectedOnly, bool noEffects)
		{
			//TODO write code to support selectedOnly and noEffects, not implemented (yet)
			altHighestSavedIndex = utils.UNDEFINED;
			altSaveID = utils.UNDEFINED;
			int curTimingGrid = 0;
			int curGridItem = 0;
			int curTrack = 0;
			int curTrackItem = 0;
			List<int> newChannelSIs = new List<int>();
			List<int> newRGBchannelSIs = new List<int>();
			List<int> newChannelGroupSIs = new List<int>();
			int altSI = utils.UNDEFINED;
			updatedTrack[] updatedTracks = new updatedTrack[tracks.Count];
			altSavedIndexes = null;
			Array.Resize(ref altSavedIndexes, highestSavedIndex + 2);
			Array.Resize(ref altSaveIDs, timingGrids.Count + 1);
			string ext = Path.GetExtension(newFileName).ToLower();
			bool channelConfig = false;
			if (ext.CompareTo(".lcc") == 0) channelConfig = true;
			if (channelConfig) noEffects = true;
			//TODO: implement channelConfig flag to write just a channel config file

			// Clear any 'written' flags from a previous save
			clearWrittenFlags();

			// Write the first line of the new sequence, containing the XML info
			WriteSequenceStart(newFileName);

			// Write all channels in Alpha Order
			if (alphaChannelNameIndexesDirty)
			{
				SortChannelNames();
			}
			for (int chai = 0; chai < channels.Count; chai++)
			{
				int chIdx = alphaChannelNameIndexes[chai];
				if ((!selectedOnly) || (channels[chIdx].selected))
				{
					altSI = WriteChannel(chIdx);
				}
			}

			// Write all RGB Channels in Alpha Order
			if (alphaRGBchannelNameIndexesDirty)
			{
				SortRGBchannelNames();
			}
			for (int rchai = 0; rchai < rgbChannels.Count; rchai++)
			{
				int rchIdx = alphaRGBchannelNameIndexes[rchai];
				if ((!selectedOnly) || (rgbChannels[rchIdx].selected))
				{
					altSI = WriteRGBchannel(rchIdx, selectedOnly, TableType.RGBchannel);
				}
			}

			// Write all ChannelGroups in Alpha Order
			if (alphaChannelGroupNameIndexesDirty)
			{
				SortChannelGroupNames();
			}
			for (int chgai = 0; chgai < channelGroups.Count; chgai++)
			{
				int chgIdx = alphaChannelGroupNameIndexes[chgai];
				if ((!selectedOnly) || (channelGroups[chgIdx].selected))
				{
					altSI = WriteChannelGroup(chgIdx, selectedOnly, TableType.ChannelGroup);
				}
			}

			// All channels should now be written, close this section
			lineOut = utils.LEVEL1 + utils.FINTBL + TABLEchannel + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;

			// Timing Grids
			if (alphaTimingGridNameIndexesDirty)
			{
				SortTimingGridNames();
			}
			// Timing Grids do not get written to the file yet
			// But we must renumber the saveIDs

			for (int tg = 0; tg < timingGrids.Count; tg++)
			{
				int atg = alphaTimingGridNameIndexes[tg];
				if ((!selectedOnly) || (timingGrids[atg].selected))
				{
					altSaveID++;
					timingGrids[atg].altSaveID = altSaveID;
					altSaveIDs[atg] = altSaveID;
					//timingGrids[atg].selected = true;
				}
			}

			writeTimingGrids(selectedOnly);


			if (alphaTrackNameIndexesDirty)
			{
				SortTrackNames();
			}
			// loop thru tracks
			lineOut = utils.LEVEL1 + utils.STFLD + TABLEtrack + utils.PLURAL + utils.FINFLD;
			writer.WriteLine(lineOut); lineCount++;
			for (int t = 0; t < tracks.Count; t++)
			{
				int trk = alphaTrackNameIndexes[t];
				if ((!selectedOnly) || (tracks[trk].selected))
				{
					writeTrack(trk, selectedOnly);
				}
			}

			WriteSequenceClose();

			errorStatus = RenameTempFile(newFileName);

			if (filename.Length < 3) filename = newFileName;


			return errorStatus;
		} // end WriteSequenceFileInCRGAlphaOrder

		private void writeEffects(Channel thisChannel)
		{
			Effect eFFect;
			for (int efIdx = 0; efIdx < thisChannel.effects.Count; efIdx++)
			{
				eFFect = thisChannel.effects[efIdx];
				lineOut = utils.LEVEL3 + utils.STFLD + TABLEeffect;
				lineOut += utils.SPC + FIELDtype + utils.FIELDEQ + SeqEnums.EffectName(eFFect.type) + utils.ENDQT;
				lineOut += utils.SPC + FIELDstartCentisecond + utils.FIELDEQ + eFFect.startCentisecond.ToString() + utils.ENDQT;
				lineOut += utils.SPC + FIELDendCentisecond + utils.FIELDEQ + eFFect.endCentisecond.ToString() + utils.ENDQT;
				if (eFFect.intensity > utils.UNDEFINED)
				{
					lineOut += utils.SPC + FIELDintensity + utils.FIELDEQ + eFFect.intensity.ToString() + utils.ENDQT;
				}
				if (eFFect.startIntensity > utils.UNDEFINED)
				{
					lineOut += utils.SPC + FIELDstartIntensity + utils.FIELDEQ + eFFect.startIntensity.ToString() + utils.ENDQT;
					lineOut += utils.SPC + FIELDendIntensity + utils.FIELDEQ + eFFect.endIntensity.ToString() + utils.ENDQT;
				}
				lineOut += utils.ENDFLD;
				writer.WriteLine(lineOut); lineCount++;
			}
		}

